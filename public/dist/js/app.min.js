"use strict";var APP=APP||{};APP.launcher=function(){function e(){document.addEventListener("DOMContentLoaded",function(){APP.router.init(),APP.serviceworker.init()})}return{init:e}}(),APP.launcher.init(),APP.page=function(){function e(e,t){return new Promise(function(a,n){var r=new XMLHttpRequest;r.open(e,t),r.onload=function(){this.status>=200&&this.status<300?a(r.response):n({status:this.status,statusText:r.statusText})},r.onerror=function(){n({status:this.status,statusText:r.statusText})},r.send()})}function t(){e("GET","api/feed").then(function(e){r.innerHTML=e})["catch"](function(e){console.error("Augh, there was an error!",e.statusText)})}function a(t){e("GET","api/appearance/"+t).then(function(e){r.innerHTML=e,APP.page.appearanceToggle()})["catch"](function(e){console.error("Oh no, there was an error!",e.statusText)})}function n(){var e=document.querySelector(".appearance__product"),t=document.querySelector('.appearance__indicator[data-uuid="'+e.getAttribute("data-uuid")+'"]'),a=document.querySelectorAll(".appearance__indicator");e.classList.add("appearance__product--active"),t.classList.add("appearance__indicator--active"),Array.prototype.forEach.call(a,function(e){e.addEventListener("click",function(e){var t=e.currentTarget.getAttribute("data-uuid");document.querySelector(".appearance__product--active").classList.remove("appearance__product--active"),document.querySelector(".appearance__indicator--active").classList.remove("appearance__indicator--active"),document.querySelector('.appearance__product[data-uuid="'+t+'"]').classList.add("appearance__product--active"),e.currentTarget.classList.add("appearance__indicator--active")})})}var r=document.querySelector("main");return{request:e,feed:t,appearance:a,appearanceToggle:n}}(),APP.router=function(){function e(){window.location.hash||(window.location="/#home"),routie({home:function(){APP.page.feed()},"appearance/:uuid":function(e){APP.page.appearance(e)}})}return{init:e}}(),APP.serviceworker=function(){function e(){"serviceWorker"in navigator?navigator.serviceWorker.register("sw.js",{scope:"./"}).then(function(e){console.log("registered sw scoped to "+e.scope)}):console.log("ServiceWorker is not supported")}return{init:e}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJsYXVuY2gtbW9kdWxlLmpzIiwicGFnZS1tb2R1bGUuanMiLCJyb3V0ZXItbW9kdWxlLmpzIiwic3ctbW9kdWxlLmpzIl0sIm5hbWVzIjpbIkFQUCIsImxhdW5jaGVyIiwiaW5pdCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJvdXRlciIsInNlcnZpY2V3b3JrZXIiLCJwYWdlIiwicmVxdWVzdCIsIm1ldGhvZCIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25sb2FkIiwidGhpcyIsInN0YXR1cyIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZW5kIiwiZmVlZCIsInRoZW4iLCJ0ZW1wbGF0ZSIsIm1haW5TZWxlY3RvciIsImlubmVySFRNTCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImFwcGVhcmFuY2UiLCJ1dWlkIiwiYXBwZWFyYW5jZVRvZ2dsZSIsImZpcnN0UHJvZHVjdCIsInF1ZXJ5U2VsZWN0b3IiLCJmaXJzdEluZGljYXRvciIsImdldEF0dHJpYnV0ZSIsImluZGljYXRvcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xhc3NMaXN0IiwiYWRkIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJmb3JFYWNoIiwiY2FsbCIsImVsIiwiZXZlbnQiLCJpZCIsImN1cnJlbnRUYXJnZXQiLCJyZW1vdmUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJyb3V0aWUiLCJob21lIiwiYXBwZWFyYW5jZS86dXVpZCIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInNjb3BlIiwicmVnIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxZQ0dBLElBQUlBLEtBQU1BLE9BS1ZBLEtBQUlDLFNBQVksV0FFWixRQUFTQyxLQUNMQyxTQUFTQyxpQkFBaUIsbUJBQW9CLFdBQzFDSixJQUFJSyxPQUFPSCxPQUNYRixJQUFJTSxjQUFjSixTQUkxQixPQUNJQSxLQUFNQSxNQUtkRixJQUFJQyxTQUFTQyxPQ3BCYkYsSUFBSU8sS0FBTyxXQUlQLFFBQVNDLEdBQVFDLEVBQVFDLEdBQ3JCLE1BQU8sSUFBSUMsU0FBUSxTQUFVQyxFQUFTQyxHQUNsQyxHQUFJQyxHQUFNLEdBQUlDLGVBQ2RELEdBQUlFLEtBQUtQLEVBQVFDLEdBQ2pCSSxFQUFJRyxPQUFTLFdBQ0xDLEtBQUtDLFFBQVUsS0FBT0QsS0FBS0MsT0FBUyxJQUNwQ1AsRUFBUUUsRUFBSU0sVUFFWlAsR0FDSU0sT0FBUUQsS0FBS0MsT0FDYkUsV0FBWVAsRUFBSU8sY0FJNUJQLEVBQUlRLFFBQVUsV0FDVlQsR0FDSU0sT0FBUUQsS0FBS0MsT0FDYkUsV0FBWVAsRUFBSU8sY0FHeEJQLEVBQUlTLFNBSVosUUFBU0MsS0FDTGhCLEVBQVEsTUFBTyxZQUNWaUIsS0FBSyxTQUFVQyxHQUNaQyxFQUFhQyxVQUFZRixJQUZqQ2xCLFNBSVcsU0FBVXFCLEdBQ2JDLFFBQVFDLE1BQU0sNEJBQTZCRixFQUFJUixjQUkzRCxRQUFTVyxHQUFXQyxHQUNoQnpCLEVBQVEsTUFBTyxrQkFBb0J5QixHQUM5QlIsS0FBSyxTQUFVQyxHQUNaQyxFQUFhQyxVQUFZRixFQUN6QjFCLElBQUlPLEtBQUsyQixxQkFIakIxQixTQUtXLFNBQVVxQixHQUNiQyxRQUFRQyxNQUFNLDZCQUE4QkYsRUFBSVIsY0FLNUQsUUFBU2EsS0FDTCxHQUFJQyxHQUFlaEMsU0FBU2lDLGNBQWMsd0JBQ3RDQyxFQUFpQmxDLFNBQVNpQyxjQUFjLHFDQUF1Q0QsRUFBYUcsYUFBYSxhQUFlLE1BQ3hIQyxFQUFhcEMsU0FBU3FDLGlCQUFpQix5QkFFM0NMLEdBQWFNLFVBQVVDLElBQUksK0JBQzNCTCxFQUFlSSxVQUFVQyxJQUFJLGlDQUU3QkMsTUFBTUMsVUFBVUMsUUFBUUMsS0FBS1AsRUFBWSxTQUFVUSxHQUMvQ0EsRUFBRzNDLGlCQUFpQixRQUFTLFNBQVU0QyxHQUNuQyxHQUFJQyxHQUFLRCxFQUFNRSxjQUFjWixhQUFhLFlBRTFDbkMsVUFDS2lDLGNBQWMsZ0NBQ2RLLFVBQVVVLE9BQU8sK0JBRXRCaEQsU0FDS2lDLGNBQWMsa0NBQ2RLLFVBQVVVLE9BQU8saUNBRXRCaEQsU0FDS2lDLGNBQWMsbUNBQXFDYSxFQUFLLE1BQ3hEUixVQUFVQyxJQUFJLCtCQUVuQk0sRUFBTUUsY0FBY1QsVUFBVUMsSUFBSSxxQ0F4RTlDLEdBQUlmLEdBQWV4QixTQUFTaUMsY0FBYyxPQTZFMUMsUUFDSTVCLFFBQVNBLEVBQ1RnQixLQUFNQSxFQUNOUSxXQUFZQSxFQUNaRSxpQkFBa0JBLE1DbkYxQmxDLElBQUlLLE9BQVMsV0FDVCxRQUFTSCxLQUNBa0QsT0FBT0MsU0FBU0MsT0FDakJGLE9BQU9DLFNBQVcsVUFFdEJFLFFBQ0lDLEtBQVEsV0FDSnhELElBQUlPLEtBQUtpQixRQUViaUMsbUJBQW9CLFNBQVN4QixHQUN6QmpDLElBQUlPLEtBQUt5QixXQUFXQyxNQUtoQyxPQUNJL0IsS0FBTUEsTUNoQmRGLElBQUlNLGNBQWdCLFdBQ2hCLFFBQVNKLEtBQ0QsaUJBQW1Cd0QsV0FDbkJBLFVBQVVDLGNBQWNDLFNBQVMsU0FBV0MsTUFBTyxPQUM5Q3BDLEtBQUssU0FBU3FDLEdBQU9oQyxRQUFRaUMsSUFBSSwyQkFBNkJELEVBQUlELFNBRXZFL0IsUUFBUWlDLElBQUksa0NBS3BCLE9BQ0k3RCxLQUFNQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG5cdE5BTUVTUEFDRSBcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBBUFAgPSBBUFAgfHwge307XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG4gICAgTEFVTkNIIEFQUFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLmxhdW5jaGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgQVBQLnJvdXRlci5pbml0KCk7XG4gICAgICAgICAgICBBUFAuc2VydmljZXdvcmtlci5pbml0KCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBpbml0XG4gICAgfTtcbn0oKTtcblxuQVBQLmxhdW5jaGVyLmluaXQoKTtcbid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcblx0UEFHRSBNT0RVTEUgW3dpdGggUHJvbWlzZV1cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5wYWdlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIG1haW5TZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKTtcblxuICAgIGZ1bmN0aW9uIHJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgICAgICAgLy8gc3JjOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDA4MTE0L2hvdy1kby1pLXByb21pc2lmeS1uYXRpdmUteGhyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZlZWQoKSB7XG4gICAgICAgIHJlcXVlc3QoJ0dFVCcsICdhcGkvZmVlZCcpLnRoZW4oZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICBtYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1Z2gsIHRoZXJlIHdhcyBhbiBlcnJvciEnLCBlcnIuc3RhdHVzVGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhcHBlYXJhbmNlKHV1aWQpIHtcbiAgICAgICAgcmVxdWVzdCgnR0VUJywgJ2FwaS9hcHBlYXJhbmNlLycgKyB1dWlkKS50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgbWFpblNlbGVjdG9yLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgICAgICAgICAgQVBQLnBhZ2UuYXBwZWFyYW5jZVRvZ2dsZSgpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPaCBubywgdGhlcmUgd2FzIGFuIGVycm9yIScsIGVyci5zdGF0dXNUZXh0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFwcGVhcmFuY2VUb2dnbGUoKSB7XG4gICAgICAgIC8vc3JjOiBodHRwczovL2dpdGh1Yi5jb20vZG9ubnl3YWxzL2xvb2tsaXZlLXNlcnZlclxuICAgICAgICB2YXIgZmlyc3RQcm9kdWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcGVhcmFuY2VfX3Byb2R1Y3QnKTtcbiAgICAgICAgdmFyIGZpcnN0SW5kaWNhdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcGVhcmFuY2VfX2luZGljYXRvcltkYXRhLXV1aWQ9XCInICsgZmlyc3RQcm9kdWN0LmdldEF0dHJpYnV0ZSgnZGF0YS11dWlkJykgKyAnXCJdJyk7XG4gICAgICAgIHZhciBpbmRpY2F0b3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFwcGVhcmFuY2VfX2luZGljYXRvcicpO1xuXG4gICAgICAgIGZpcnN0UHJvZHVjdC5jbGFzc0xpc3QuYWRkKCdhcHBlYXJhbmNlX19wcm9kdWN0LS1hY3RpdmUnKTtcbiAgICAgICAgZmlyc3RJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZCgnYXBwZWFyYW5jZV9faW5kaWNhdG9yLS1hY3RpdmUnKTtcblxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGluZGljYXRvcnMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS11dWlkJyk7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwZWFyYW5jZV9fcHJvZHVjdC0tYWN0aXZlJykuY2xhc3NMaXN0LnJlbW92ZSgnYXBwZWFyYW5jZV9fcHJvZHVjdC0tYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwZWFyYW5jZV9faW5kaWNhdG9yLS1hY3RpdmUnKS5jbGFzc0xpc3QucmVtb3ZlKCdhcHBlYXJhbmNlX19pbmRpY2F0b3ItLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcGVhcmFuY2VfX3Byb2R1Y3RbZGF0YS11dWlkPVwiJyArIGlkICsgJ1wiXScpLmNsYXNzTGlzdC5hZGQoJ2FwcGVhcmFuY2VfX3Byb2R1Y3QtLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdhcHBlYXJhbmNlX19pbmRpY2F0b3ItLWFjdGl2ZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZWVkOiBmZWVkLFxuICAgICAgICBhcHBlYXJhbmNlOiBhcHBlYXJhbmNlLFxuICAgICAgICBhcHBlYXJhbmNlVG9nZ2xlOiBhcHBlYXJhbmNlVG9nZ2xlXG4gICAgfTtcbn0oKTtcbid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAgXG5cdFJPVVRFUiBNT0RVTEUgW3dpdGggcm91dGVyIGxpYjogUm91dGllXVxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuQVBQLnJvdXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBpZiAoIXdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnLyNob21lJztcbiAgICAgICAgfVxuICAgICAgICByb3V0aWUoe1xuICAgICAgICAgICAgJ2hvbWUnOiBmdW5jdGlvbiBob21lKCkge1xuICAgICAgICAgICAgICAgIEFQUC5wYWdlLmZlZWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnYXBwZWFyYW5jZS86dXVpZCc6IGZ1bmN0aW9uIGFwcGVhcmFuY2VVdWlkKHV1aWQpIHtcbiAgICAgICAgICAgICAgICBBUFAucGFnZS5hcHBlYXJhbmNlKHV1aWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG59KCk7XG4ndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogIFxuXHRTRVJWSUNFIFdPUktFUiBNT0RVTEVcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkFQUC5zZXJ2aWNld29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcignc3cuanMnLCB7IHNjb3BlOiAnLi8nIH0pLnRoZW4oZnVuY3Rpb24gKHJlZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlcmVkIHN3IHNjb3BlZCB0byAnICsgcmVnLnNjb3BlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2VXb3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXRcbiAgICB9O1xufSgpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG5cdE5BTUVTUEFDRSBcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBBUFAgPSBBUFAgfHwge307XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG4gICAgTEFVTkNIIEFQUFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLyBcbkFQUC5sYXVuY2hlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgIFxuICAgIGZ1bmN0aW9uIGluaXQoKSB7ICAgICBcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkgeyBcbiAgICAgICAgICAgIEFQUC5yb3V0ZXIuaW5pdCgpO1xuICAgICAgICAgICAgQVBQLnNlcnZpY2V3b3JrZXIuaW5pdCgpO1xuICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICB9OyAgICBcbiAgICBcbiAgICByZXR1cm4geyBcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG4gICAgXG59KCkpO1xuXG5BUFAubGF1bmNoZXIuaW5pdCgpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXG5cdFBBR0UgTU9EVUxFIFt3aXRoIFByb21pc2VdXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5BUFAucGFnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgdmFyIG1haW5TZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKTtcblxuICAgIGZ1bmN0aW9uIHJlcXVlc3QobWV0aG9kLCB1cmwpIHsgLy8gc3JjOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDA4MTE0L2hvdy1kby1pLXByb21pc2lmeS1uYXRpdmUteGhyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZlZWQoKSB7XG4gICAgICAgIHJlcXVlc3QoJ0dFVCcsICdhcGkvZmVlZCcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBtYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBdWdoLCB0aGVyZSB3YXMgYW4gZXJyb3IhJywgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFwcGVhcmFuY2UodXVpZCkge1xuICAgICAgICByZXF1ZXN0KCdHRVQnLCAnYXBpL2FwcGVhcmFuY2UvJyArIHV1aWQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBtYWluU2VsZWN0b3IuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgQVBQLnBhZ2UuYXBwZWFyYW5jZVRvZ2dsZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignT2ggbm8sIHRoZXJlIHdhcyBhbiBlcnJvciEnLCBlcnIuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFwcGVhcmFuY2VUb2dnbGUoKSB7IC8vc3JjOiBodHRwczovL2dpdGh1Yi5jb20vZG9ubnl3YWxzL2xvb2tsaXZlLXNlcnZlclxuICAgICAgICB2YXIgZmlyc3RQcm9kdWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcGVhcmFuY2VfX3Byb2R1Y3QnKTtcbiAgICAgICAgdmFyIGZpcnN0SW5kaWNhdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcGVhcmFuY2VfX2luZGljYXRvcltkYXRhLXV1aWQ9XCInICsgZmlyc3RQcm9kdWN0LmdldEF0dHJpYnV0ZSgnZGF0YS11dWlkJykgKyAnXCJdJyk7XG4gICAgICAgIHZhciBpbmRpY2F0b3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFwcGVhcmFuY2VfX2luZGljYXRvcicpO1xuXG4gICAgICAgIGZpcnN0UHJvZHVjdC5jbGFzc0xpc3QuYWRkKCdhcHBlYXJhbmNlX19wcm9kdWN0LS1hY3RpdmUnKTtcbiAgICAgICAgZmlyc3RJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZCgnYXBwZWFyYW5jZV9faW5kaWNhdG9yLS1hY3RpdmUnKTtcblxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGluZGljYXRvcnMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS11dWlkJyk7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmFwcGVhcmFuY2VfX3Byb2R1Y3QtLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCdhcHBlYXJhbmNlX19wcm9kdWN0LS1hY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuYXBwZWFyYW5jZV9faW5kaWNhdG9yLS1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZSgnYXBwZWFyYW5jZV9faW5kaWNhdG9yLS1hY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuYXBwZWFyYW5jZV9fcHJvZHVjdFtkYXRhLXV1aWQ9XCInICsgaWQgKyAnXCJdJylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJ2FwcGVhcmFuY2VfX3Byb2R1Y3QtLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdhcHBlYXJhbmNlX19pbmRpY2F0b3ItLWFjdGl2ZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBmZWVkOiBmZWVkLFxuICAgICAgICBhcHBlYXJhbmNlOiBhcHBlYXJhbmNlLFxuICAgICAgICBhcHBlYXJhbmNlVG9nZ2xlOiBhcHBlYXJhbmNlVG9nZ2xlXG4gICAgfTtcblxufSkoKTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICBcblx0Uk9VVEVSIE1PRFVMRSBbd2l0aCByb3V0ZXIgbGliOiBSb3V0aWVdXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovICAgICAgXG5BUFAucm91dGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpbml0ICgpIHtcbiAgICAgICAgaWYgKCF3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gJy8jaG9tZSc7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICByb3V0aWUoe1xuICAgICAgICAgICAgJ2hvbWUnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBBUFAucGFnZS5mZWVkKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2FwcGVhcmFuY2UvOnV1aWQnOiBmdW5jdGlvbih1dWlkKSB7XG4gICAgICAgICAgICAgICAgQVBQLnBhZ2UuYXBwZWFyYW5jZSh1dWlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBpbml0XG4gICAgfTsgICAgIFxuICAgIFxufSkoKTtcbiAgICAiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICBcblx0U0VSVklDRSBXT1JLRVIgTU9EVUxFXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovICAgXG5BUFAuc2VydmljZXdvcmtlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCdzdy5qcycsIHsgc2NvcGU6ICcuLycgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZWcpIHsgY29uc29sZS5sb2coJ3JlZ2lzdGVyZWQgc3cgc2NvcGVkIHRvICcgKyByZWcuc2NvcGUpfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU2VydmljZVdvcmtlciBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBpbml0XG4gICAgfTsgXG4gICAgXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
