"use strict";var APP=APP||{};APP.launcher=function(){function e(){document.addEventListener("DOMContentLoaded",function(){APP.router.init(),APP.serviceworker.init(),APP.fonts.init()})}return{init:e}}(),APP.launcher.init(),APP.fonts=function(){function e(){var e=new FontFaceObserver("Raleway");Promise.all([e.check()]).then(function(){document.documentElement.className+=" fonts-loaded"})}return{init:e}}(),APP.page=function(){function e(e,t){return new Promise(function(n,a){var r=new XMLHttpRequest;r.open(e,t),r.onload=function(){this.status>=200&&this.status<300?n(r.response):a({status:this.status,statusText:r.statusText})},r.onerror=function(){a({status:this.status,statusText:r.statusText})},r.send()})}function t(){e("GET","api/feed").then(function(e){r.innerHTML=e})["catch"](function(e){console.error("Augh, there was an error!",e.statusText)})}function n(t){e("GET","api/appearance/"+t).then(function(e){r.innerHTML=e,APP.page.appearanceToggle()})["catch"](function(e){console.error("Oh no, there was an error!",e.statusText)})}function a(){var e=document.querySelector(".appearance__product"),t=document.querySelector('.appearance__indicator[data-uuid="'+e.getAttribute("data-uuid")+'"]'),n=document.querySelectorAll(".appearance__indicator");e.classList.add("appearance__product--active"),t.classList.add("appearance__indicator--active"),Array.prototype.forEach.call(n,function(e){e.addEventListener("click",function(e){var t=e.currentTarget.getAttribute("data-uuid");document.querySelector(".appearance__product--active").classList.remove("appearance__product--active"),document.querySelector(".appearance__indicator--active").classList.remove("appearance__indicator--active"),document.querySelector('.appearance__product[data-uuid="'+t+'"]').classList.add("appearance__product--active"),e.currentTarget.classList.add("appearance__indicator--active")})})}var r=document.querySelector("main");return{request:e,feed:t,appearance:n,appearanceToggle:a}}(),APP.router=function(){function e(){window.location.hash||(window.location="/#home"),routie({home:function(){APP.page.feed()},"appearance/:uuid":function(e){APP.page.appearance(e)}})}return{init:e}}(),APP.serviceworker=function(){function e(){"serviceWorker"in navigator?navigator.serviceWorker.register("sw.js",{scope:"./"}).then(function(e){console.log("registered sw scoped to "+e.scope)}):console.log("ServiceWorker is not supported")}return{init:e}}();
//# sourceMappingURL=data:application/json;base64,
